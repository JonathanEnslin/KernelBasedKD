import argparse

def get_arg_parser():
    parser = argparse.ArgumentParser(description="Training script for NN")
    parser.add_argument('--params', type=str, default='params.json', help='Path to the hyperparameter file')
    parser.add_argument('--param_set', type=str, required=True, help='Name of the parameter set to use')
    parser.add_argument('--model_name', type=str, required=True, help='Model name (resnet20, resnet56, resnet110...)')
    parser.add_argument('--dataset', type=str, required=True, choices=['CIFAR10', 'CIFAR100', 'TinyImageNet'], help='Dataset to use (CIFAR10, CIFAR100 or TinyImageNet)')
    parser.add_argument('--resume', type=str, help='Path to the checkpoint file to resume training')
    parser.add_argument('--run_name', type=str, default=None, help='Optional run name to overwrite the generated name')
    parser.add_argument('--checkpoint_dir', type=str, default='run_data/checkpoints', help='Directory to save checkpoints')
    parser.add_argument('--checkpoint_freq', type=int, default=25, help='Frequency of checkpoint saving in epochs')
    parser.add_argument('--disable_auto_run_indexing', action='store_true', help='Disable automatic run indexing (i.e. _run1, _run2, etc.)')
    parser.add_argument('--dataset_dir', type=str, default='data', help='Directory of the dataset (default is data)')
    parser.add_argument('--model_save_dir', type=str, default='run_data/trained_models', help='Directory to save trained models')
    parser.add_argument('--device', type=str, default='cuda', choices=["cpu", "cuda"] , help='Device to use (cpu or cuda)')
    parser.add_argument('--use_amp', action='store_true', help='Use Automatic Mixed Precision (AMP) and Gradient Scaling (Warning: may cause gradient under/overflow, use carefully)')
    parser.add_argument('--disable_test', action='store_true', help='Disable the test set if validation set is used')
    parser.add_argument('--disable_test_until_epoch', type=int, default=0, help='Disable the test set until this epoch')
    parser.add_argument('--output_data_dir', type=str, default='run_data', help='Directory to save the run data')
    parser.add_argument('--run_tag', type=str, default='', help='Tag to add to the run name')
    # ==================== ARGS RELATED TO VALIDATION TRAINING ====================
    parser.add_argument('--use_val', action='store_true', help='Use a validation set')
    parser.add_argument('--val_size', type=float, help='Proportion of training data used for validation set (0 < val_size < 1)')
    parser.add_argument('--early_stopping_patience', type=int, help='Patience for early stopping')
    parser.add_argument('--early_stopping_start_epoch', type=int, help='Start early stopping after this many epochs')
    parser.add_argument('--track_best_after_epoch', type=int, default=10, help='Number of epochs to wait before starting to track the best model (Only enabled when using validation set)')
    parser.add_argument('--val_split_random_state', type=int, default=None, help='Random state for the validation split')
    parser.add_argument('--use_split_indices_from_file', type=str, default=None, help='Path to a file containing indices for the train and validation split')
    parser.add_argument('--disable_val_until_epoch', type=int, default=0, help='Disable the validation set until this epoch')
    # ==================== ARGS RELATED TO DATA LOADING ====================
    parser.add_argument('--num_workers', type=int, default=2, help='Number of workers for the DataLoader')
    parser.add_argument('--disable_persistent_workers', action='store_true', help='Disables using persistent workers for the DataLoader')
    # ==================== KD RELATED ARGS ====================
    parser.add_argument('--kd_params', type=str, required=False, help='Path to the knowledge distillation config file')
    parser.add_argument('--kd_set', type=str, required=False, help='The KD set to use')
    parser.add_argument('--teacher_path', type=str, required=False, help='Path to the teacher model')
    parser.add_argument('--teacher_type', type=str, help='Type of the teacher model, must be one of the supported model types and match the teacher model file')
    parser.add_argument('--use_cached_logits', action='store_true')
    parser.add_argument('--use_cached_feature_maps', action='store_true')
    parser.add_argument('--batch_stepper', type=str, help='Batch stepping function to use')
    parser.add_argument('--batch_stepper_args', type=str, help='Arguments for the batch stepping function')
    # ------==================== FACTOR (and kFT) RELATED ARGS ====================
    parser.add_argument('--paraphraser_path', type=str, help='Path to the paraphraser model')
    return parser

class Config:
    def __init__(self, **kwargs):
        self.params = kwargs.get('params', 'default_params.json')
        self.param_set = kwargs.get('param_set', 'default_set')
        self.model_name = kwargs.get('model_name', 'resnet20')
        self.dataset = kwargs.get('dataset', 'CIFAR10')
        self.resume = kwargs.get('resume', None)
        self.run_name = kwargs.get('run_name', None)
        self.checkpoint_dir = kwargs.get('checkpoint_dir', 'run_data/checkpoints')
        self.checkpoint_freq = kwargs.get('checkpoint_freq', 25)
        self.disable_auto_run_indexing = kwargs.get('disable_auto_run_indexing', False)
        self.dataset_dir = kwargs.get('dataset_dir', 'data')
        self.model_save_dir = kwargs.get('model_save_dir', 'run_data/trained_models')
        self.device = kwargs.get('device', 'cuda')
        self.use_amp = kwargs.get('use_amp', False)
        self.disable_test = kwargs.get('disable_test', False)
        self.disable_test_until_epoch = kwargs.get('disable_test_until_epoch', 0)
        self.output_data_dir = kwargs.get('output_data_dir', 'run_data')
        self.run_tag = kwargs.get('run_tag', '')
        self.use_val = kwargs.get('use_val', False)
        self.val_size = kwargs.get('val_size', None)
        self.early_stopping_patience = kwargs.get('early_stopping_patience', None)
        self.early_stopping_start_epoch = kwargs.get('early_stopping_start_epoch', None)
        self.track_best_after_epoch = kwargs.get('track_best_after_epoch', 10)
        self.val_split_random_state = kwargs.get('val_split_random_state', None)
        self.use_split_indices_from_file = kwargs.get('use_split_indices_from_file', None)
        self.disable_val_until_epoch = kwargs.get('disable_val_until_epoch', 0)
        self.num_workers = kwargs.get('num_workers', 2)
        self.disable_persistent_workers = kwargs.get('disable_persistent_workers', False)
        self.kd_params = kwargs.get('kd_params', None)
        self.kd_set = kwargs.get('kd_set', None)
        self.teacher_path = kwargs.get('teacher_path', None)
        self.teacher_type = kwargs.get('teacher_type', None)
        self.use_cached_logits = kwargs.get('use_cached_logits', False)
        self.use_cached_feature_maps = kwargs.get('use_cached_feature_maps', False)
        self.batch_stepper = kwargs.get('batch_stepper', None)
        self.batch_stepper_args = kwargs.get('batch_stepper_args', None)

    @classmethod
    def from_parser(cls, parser):
        args = parser.parse_args()
        return cls(**vars(args))
